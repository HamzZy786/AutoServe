version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://backend:8000
      - REACT_APP_ENV=development
    depends_on:
      - backend
    networks:
      - autoserve-network
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules

  # Backend API Service
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/autoserve
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    networks:
      - autoserve-network
    volumes:
      - ./apps/backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Worker Service
  worker:
    build:
      context: ./apps/worker
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/autoserve
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    networks:
      - autoserve-network
    volumes:
      - ./apps/worker:/app

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=autoserve
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    networks:
      - autoserve-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - autoserve-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    networks:
      - autoserve-network
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    networks:
      - autoserve-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - autoserve-network
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # Loki Logging
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    networks:
      - autoserve-network
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml

  # Fluent Bit Log Collector
  fluent-bit:
    image: fluent/fluent-bit:latest
    networks:
      - autoserve-network
    volumes:
      - ./monitoring/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      - loki

  # MinIO S3-Compatible Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - autoserve-network
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"

  # ML Controller Service
  ml-controller:
    build:
      context: ./ml-controller
      dockerfile: Dockerfile
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - KUBERNETES_SERVICE_HOST=host.docker.internal
      - LOG_LEVEL=INFO
    networks:
      - autoserve-network
    volumes:
      - ./ml-controller:/app
      - ~/.kube:/root/.kube:ro
    depends_on:
      - prometheus

networks:
  autoserve-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  minio_data:
